name: Build Binaries & Upload Artifacts

on: workflow_call

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0

jobs:
  upload_assets_macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: x86_64-apple-darwin
          default: true

      - name: Install dependencies
        run: brew install llvm

      - name: Build x86_64-apple-darwin
        run: cargo build --release --target=x86_64-apple-darwin

      - name: Setup Rust for aarch64-apple-darwin
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: aarch64-apple-darwin
          default: true

      - name: Build aarch64-apple-darwin
        run: cargo build --release --target=aarch64-apple-darwin

      - name: Set permissions for macOS binaries
        run: |
          chmod +x target/x86_64-apple-darwin/release/fta
          chmod +x target/aarch64-apple-darwin/release/fta

      - name: Create tarballs and move binaries
        run: |
          tar czvf x86_64-apple-darwin.tar.gz -C target/x86_64-apple-darwin/release fta
          tar czvf aarch64-apple-darwin.tar.gz -C target/aarch64-apple-darwin/release fta

      - name: Upload binaries as artifacts
        uses: actions/upload-artifact@v2
        with:
          name: macos-binaries
          path: |
            *.tar.gz

  upload_assets_windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Rust for x86_64-pc-windows-msvc
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: x86_64-pc-windows-msvc
          default: true
          override: true

      - name: Build x86_64-pc-windows-msvc
        run: cargo build --release --target=x86_64-pc-windows-msvc

      - name: Setup Rust for aarch64-pc-windows-msvc
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: aarch64-pc-windows-msvc
          default: true
          override: true

      - name: Build aarch64-pc-windows-msvc
        run: cargo build --release --target=aarch64-pc-windows-msvc

      - name: Create zipfiles and move binaries
        shell: pwsh
        run: |
          Compress-Archive -Path target/x86_64-pc-windows-msvc/release/fta.exe -DestinationPath x86_64-pc-windows-msvc.zip
          Compress-Archive -Path target/aarch64-pc-windows-msvc/release/fta.exe -DestinationPath aarch64-pc-windows-msvc.zip

      - name: Upload binaries as artifacts
        uses: actions/upload-artifact@v2
        with:
          name: windows-binaries
          path: |
            *.zip

  upload_assets_linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Update packages
        run: sudo apt-get update

      - name: Install aarch64 dependencies
        run: sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross

      - name: Install aarch64-unknown-linux-musl dependencies
        run: |
          sudo apt-get install -y musl-tools
          sudo apt-get install gcc-arm-linux-gnueabi

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          profile: minimal
          target: x86_64-unknown-linux-musl

      - name: Add Rust targets
        run: |
          rustup target add x86_64-unknown-linux-musl
          rustup target add aarch64-unknown-linux-musl
          rustup target add arm-unknown-linux-musleabi

      - name: Install MUSL toolchain for AArch64
        run: |
          wget -q https://musl.cc/aarch64-linux-musl-cross.tgz
          tar -xf aarch64-linux-musl-cross.tgz
          echo "$(pwd)/aarch64-linux-musl-cross/bin" >> $GITHUB_PATH

      - name: Build and tarball
        run: |
          TARGETS=(
            x86_64-unknown-linux-musl
            aarch64-unknown-linux-musl
            arm-unknown-linux-musleabi
          )

          for TARGET in "${TARGETS[@]}"; do
            echo "Building for $TARGET"
            cargo build --release --target="$TARGET"
            chmod +x target/${TARGET}/release/fta
            tar czf "${TARGET}.tar.gz" -C "./target/${TARGET}/release/" fta
          done

      - name: Upload binaries as artifacts
        uses: actions/upload-artifact@v2
        with:
          name: linux-binaries
          path: |
            *.tar.gz
