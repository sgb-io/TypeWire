name: Build Binaries & Release

on:
  push:
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0

jobs:
  create_github_release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Get version
        id: get_version
        run: |
          VERSION=$(grep '^version =' crates/fta/Cargo.toml | sed 's/^version = "\(.*\)"/\1/')
          echo "Version: $VERSION"
          echo "FTA_VERSION=$VERSION" >> $GITHUB_OUTPUT
      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: v${{ steps.get_version.outputs.FTA_VERSION }}
          draft: true
          prerelease: false
    outputs:
      version_name: ${{ steps.get_version.outputs.FTA_VERSION }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}

  upload_assets_macos:
    needs: create_github_release
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: x86_64-apple-darwin
          default: true

      - name: Install dependencies
        run: brew install llvm

      - name: Build x86_64-apple-darwin
        run: cargo build --release --target=x86_64-apple-darwin

      - name: Setup Rust for aarch64-apple-darwin
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: aarch64-apple-darwin
          default: true

      - name: Build aarch64-apple-darwin
        run: cargo build --release --target=aarch64-apple-darwin

      - name: Set permissions for macOS binaries
        run: |
          chmod +x target/x86_64-apple-darwin/release/fta
          chmod +x target/aarch64-apple-darwin/release/fta

      - name: Create tarballs
        run: |
          tar czvf x86_64-apple-darwin.tar.gz target/x86_64-apple-darwin/release/fta
          tar czvf aarch64-apple-darwin.tar.gz target/aarch64-apple-darwin/release/fta

      - name: Upload macOS x86 tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_github_release.outputs.upload_url }}
          asset_path: ./x86_64-apple-darwin.tar.gz
          asset_name: fta-${{ needs.create_github_release.outputs.version_name }}-x86_64-apple-darwin.tar.gz
          asset_content_type: application/gzip

      - name: Upload macOS silicon tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_github_release.outputs.upload_url }}
          asset_path: ./aarch64-apple-darwin.tar.gz
          asset_name: fta-${{ needs.create_github_release.outputs.version_name }}-aarch64-apple-darwin.tar.gz
          asset_content_type: application/gzip

  upload_assets_windows:
    needs: create_github_release
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Rust for x86_64-pc-windows-msvc
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: x86_64-pc-windows-msvc
          default: true
          override: true

      - name: Install 7zip
        run: choco install 7zip

      - name: Build x86_64-pc-windows-msvc
        run: cargo build --release --target=x86_64-pc-windows-msvc

      - name: Setup Rust for aarch64-pc-windows-msvc
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: aarch64-pc-windows-msvc
          default: true
          override: true

      - name: Build aarch64-pc-windows-msvc
        run: cargo build --release --target=aarch64-pc-windows-msvc

      - name: Create zipfiles
        run: |
          7z a fta-x86_64-pc-windows-msvc.7z target/x86_64-pc-windows-msvc/release/fta.exe
          7z a fta-aarch64-pc-windows-msvc.7z target/aarch64-pc-windows-msvc/release/fta.exe

      - name: Upload Windows x86 zipfile
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_github_release.outputs.upload_url }}
          asset_path: ./fta-x86_64-pc-windows-msvc.7z
          asset_name: fta-${{ needs.create_github_release.outputs.version_name }}-x86_64-pc-windows-msvc.7z
          asset_content_type: application/x-7z-compressed

      - name: Upload Windows ARM64 zipfile
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_github_release.outputs.upload_url }}
          asset_path: ./fta-aarch64-pc-windows-msvc.7z
          asset_name: fta-${{ needs.create_github_release.outputs.version_name }}-aarch64-pc-windows-msvc.7z
          asset_content_type: application/x-7z-compressed

  upload_assets_linux:
    needs: create_github_release
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          profile: minimal
          target: x86_64-unknown-linux-gnu

      - name: Add Rust targets
        run: |
          rustup target add x86_64-unknown-linux-gnu
          rustup target add aarch64-unknown-linux-gnu
          rustup target add aarch64-unknown-linux-musl
          rustup target add armv7-unknown-linux-gnueabihf

      - name: Install aarch64 dependencies
        run: sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross

      - name: Install ARM dependencies
        run: sudo apt-get install -y gcc-arm-linux-gnueabihf libc6-dev-armhf-cross

      - name: Install aarch64-unknown-linux-musl dependencies
        run: sudo apt-get install -y musl-tools

      - name: Install MUSL toolchain for AArch64
        run: |
          wget -q https://musl.cc/aarch64-linux-musl-cross.tgz
          tar -xf aarch64-linux-musl-cross.tgz
          echo "$(pwd)/aarch64-linux-musl-cross/bin" >> $GITHUB_PATH

      - name: Build and tarball
        run: |
          TARGETS=(
            x86_64-unknown-linux-gnu
            aarch64-unknown-linux-gnu
            aarch64-unknown-linux-musl
            armv7-unknown-linux-gnueabihf
          )

          for TARGET in "${TARGETS[@]}"; do
            echo "Building for $TARGET"
            cargo build --release --target="$TARGET"
            chmod +x target/${TARGET}/release/fta
            tar czf "fta-${TARGET}.tar.gz" -C "./target/${TARGET}/release/" fta
          done

      - name: Upload x86_64-unknown-linux-gnu tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_github_release.outputs.upload_url }}
          asset_path: ./fta-x86_64-unknown-linux-gnu.tar.gz
          asset_name: fta-${{ needs.create_github_release.outputs.version_name }}-x86_64-unknown-linux-gnu.tar.gz
          asset_content_type: application/gzip

      - name: Upload aarch64-unknown-linux-gnu tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_github_release.outputs.upload_url }}
          asset_path: ./fta-aarch64-unknown-linux-gnu.tar.gz
          asset_name: fta-${{ needs.create_github_release.outputs.version_name }}-aarch64-unknown-linux-gnu.tar.gz
          asset_content_type: application/gzip

      - name: Upload aarch64-unknown-linux-musl tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_github_release.outputs.upload_url }}
          asset_path: ./fta-aarch64-unknown-linux-musl.tar.gz
          asset_name: fta-${{ needs.create_github_release.outputs.version_name }}-aarch64-unknown-linux-musl.tar.gz
          asset_content_type: application/gzip

      - name: Upload armv7-unknown-linux-gnueabihf tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_github_release.outputs.upload_url }}
          asset_path: ./fta-armv7-unknown-linux-gnueabihf.tar.gz
          asset_name: fta-${{ needs.create_github_release.outputs.version_name }}-armv7-unknown-linux-gnueabihf.tar.gz
          asset_content_type: application/gzip

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          cargo publish --token $CARGO_REGISTRY_TOKEN
        working-directory: crates/fta
